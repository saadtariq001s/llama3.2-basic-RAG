import streamlit as st
import sqlite3
from ollama import chat

# Database setup function
def create_dummy_database():
    connection = sqlite3.connect('patient.db')
    cursor = connection.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS patients (
                        id INTEGER PRIMARY KEY,
                        name TEXT,
                        patient_state TEXT
                    )''')
    patients = [
        ('Alice', 'California'),
        ('Bob', 'Texas'),
        ('Charlie', 'California'),
        ('Diana', 'New York'),
        ('Eve', 'California')
    ]
    cursor.executemany('INSERT INTO patients (name, state) VALUES (?, ?)', patients)
    connection.commit()
    connection.close()

# Process human query to SQL
def process_human_query(human_query):
    response = chat(model='llama3.2-vision', messages=[
        {
            'role': 'user',
            'content': f"Convert the following human query into an SQL query: {human_query}"
        }
    ])
    sql_response = response.message.content.strip()
    
    if "SELECT" in sql_response:
        sql_start = sql_response.find("SELECT")
        sql_query = sql_response[sql_start:].strip()
        
        if ";" in sql_query:
            sql_end = sql_query.find(";") + 1
            sql_query = sql_query[:sql_end]
        
        return sql_query.strip()
    else:
        raise ValueError("Invalid SQL query generated by the model.")

# Execute SQL query
def execute_sql_query(sql_query):
    connection = sqlite3.connect('patient.db')
    cursor = connection.cursor()

    try:
        cursor.execute(sql_query)
        result = cursor.fetchall()
    except sqlite3.Warning as e:
        st.warning(f"Warning: {e}")
        return []
    finally:
        connection.close()
    
    return result


def synthesize_result(human_query, result):
    # Convert result to a string representation for the LLM
    result_str = str(result[0][0])
    print(result_str)
    
    response = chat(model='llama3.2-vision', messages=[
        {
            'role': 'system',
            'content': '''You are a strict SQL result interpreter. 
            - ONLY generate a description based on the exact data provided.
            - Do NOT add any information not present in the result.
            - Use only the numeric values and strings from the SQL query result.
            - If the result is empty, state that no data matches the query.
            - Format the response as a clear, factual statement.'''
        },
        {
            'role': 'user',
            'content': f'Original Query: "{human_query}"\nSQL Result: {result_str}\n\nTask: Transform the numeric SQL result into a natural language sentence that contextualizes the numeric value written inside the obtained list.'
        }
    ])
    return response['message']['content'].strip()


# Streamlit App
def main():
    st.set_page_config(page_title="Patient Database Explorer", page_icon=":hospital:")
    
    # Ensure database is created
    create_dummy_database()
    
    # App title and description
    st.title("Patient Database Explorer")
    st.write("Ask questions about our patient database!")
    
    # Query input
    user_query = st.text_input("Enter your query:", 
                                placeholder="For example: How many patients are from California?")
    
    # Query submission button
    if st.button("Get Insights"):
        if user_query:
            try:
                # Process query
                sql_query = process_human_query(user_query)
                st.expander("Generated SQL Query").write(sql_query)
                
                # Execute query
                result = execute_sql_query(sql_query)
                
                # Display raw results
                st.subheader("Query Results")
                st.dataframe(result)
                
                # Synthesize human-readable result
                human_result = synthesize_result(user_query, result)
                st.success(human_result)
            
            except Exception as e:
                st.error(f"An error occurred: {e}")
        else:
            st.warning("Please enter a query!")

# Run the Streamlit app
if __name__ == "__main__":
    main()